;;;; .sbclrc
;;;;
;;;; Cleaned-up and modified from the semi-epic 2014 blog post by Chris Kohlhepp:
;;;; "Meta-Circular Adventures in Functional Abstraction"
;;;; "Challenging Clojure in Common Lisp"
;;;;
;;;; The original post is down but a mirror can still be found here:
;;;; https://hackerfall.com/story/challenging-clojure-in-common-lisp
;;;;
;;;; Comment or uncomment various libraries below as needed.
;;;;
;;;; Jon Atack
;;;;

;;; The following lines added by ql:add-to-init-file:
#-quicklisp
(let ((quicklisp-init (merge-pathnames "quicklisp/setup.lisp"
                                       (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)))

(setf sb-impl::*default-external-format* :utf-8)

(require 'asdf)


;;; Configure SBCL for Functional & Distributed Programming
;;; =======================================================

(handler-bind
    ((sb-ext:implicit-generic-function-warning #'muffle-warning)
     (sb-kernel:type-proclamation-mismatch-warning #'muffle-warning)
     (style-warning #'muffle-warning)
     (warning #'muffle-warning))


  ;;; Functional programming default packages
  ;;; =======================================

  ;; Pattern Matching
  (asdf:load-system 'optima)
  (asdf:load-system 'cl-algebraic-data-type)

  ;; FRP (Functional Reactive Programming Framework)
  (asdf:load-system 'cells)

  ;;; Concurrent Programming
  ;;; ======================
  ;; Actor Model
  (asdf:load-system 'cl-actors)

  ;;;  Default Namespaces
  ;;; ==================
  (use-package :cl-actors)
  (use-package :cells)
  (use-package :optima)
  )
